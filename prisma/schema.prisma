generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String?
  email String  @unique
  image String?
  accounts Account[]
  role UserRole @default(USER)

 chatMessages ChatMessage[] // New relation for chat messages

  staredPlayground Playground[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Templates {
  REACT
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}

model Playground {
  id            String         @id @default(auto()) @map("_id")
  title         String
  description   String?
  template      Templates      @default(REACT)
  templateFiles TemplateFile[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Starmark      StarMark[]
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StarMark {
  id           String     @id @default(auto()) @map("_id")
  userId       String
  playgroundId String
  isMarked     Boolean
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])
}

model TemplateFile {
  id           String     @id @default(auto()) @map("_id")
  content      Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  playgroundId String     @unique
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}

// New model for AI chat messages
model ChatMessage {
  id        String   @id @default(auto()) @map("_id")
  userId    String
  role      String // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}